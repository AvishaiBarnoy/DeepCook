
# To Do:
1. reform add_meal_questions() in io_data to be more general and versatile  
	1.1 add description printed before everything to explain what's going on.
	1.2 create a "def check_input(inp)" function to test if the input is correct
2. check convention for column naming with pandas. Choose one - camel, snake_eye, pascal
3. add enumerative classes
5. go through roadmap and do the same as for TODO.txt.
6. add description to main.py
7. think of how to structure main.py to allow the direct use of the iodata module
8. add a sandwich db
9 logic of flags should be done in main() in main.py
10. add logic function for input mode: choices: (1) new meal, (2) update values, etc.
11. change relative paths to data into absolute paths

# Things to Add to functions:

## Data organization:

## Features:
	1. meal scaling factor - can be used for weekly meal planning
	2. recipe suggestion - Krutit, Kitchencoach

## Random choice:
	build a linear function for weights calculations, flags should be specified which weights to add
		with default settings: last_made timestamp, rank, no TA

	1. Adjust weights according to times made - maybe timestamp and then weight adjustment
			is only made if meal was prepared in the last n days.
    2. Adjust weights by ease
    3. Give k-choices ordered by ease and/or rank
    4. make choice by kosher type

## Choose TA:
	1. choice by type.
	2. Time dilation - TA is only availabe in random if TA was not ordered in the past X days. 

